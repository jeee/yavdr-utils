#!/usr/bin/python

import os
import re
import sys
import time
import fcntl
import argparse
import neo_cgi
import neo_util 

parser = argparse.ArgumentParser(description='yavdr hdf command line tool')
parser.add_argument('-a', '--action', help='default is read', default='read', choices=['read', 'write', 'delete', 'check', 'preset', 'childrens', 'dump'])
parser.add_argument('-k', '--key', help='Is a dotted path of the form "a.b.c"', required=True)
parser.add_argument('-v', '--value', help='Content for a --key. Need only for write action')
parser.add_argument('--file', help='default show to /var/lib/yavdrdb.hdf', default='/var/lib/yavdrdb.hdf')
args = parser.parse_args()

class HDF:
    def __init__(self, file):
        self.file = file
        self.hdf = neo_util.HDF()
        self.readFile()
    def readKey(self, key, default = ""):
        return self.hdf.getValue(key, default)
    def writeKey(self, key, value):
        return self.hdf.setValue(key, value)
    def deleteKey(self, key):
        return self.hdf.removeTree(key)
    def dumpKey(self, key):
        dump = []
        for entry in self.hdf.dump().split("\n"):
            regex = re.compile('^%s'%key)
            if entry != "" and (key == '.' or re.search(regex, entry)):
                dump.append(entry)
        return "\n".join(dump)
    def childrensByKey(self, key):
        childrens = []
        dataset = self.hdf.getObj(key)
        try:
            child = dataset.child()
            while child:
                childrens.append(child.name())
                child = child.next()
        except:
            pass
        return childrens
    def checkKey(self, key):
        if self.readKey(key, "NULLNULLNULL") == "NULLNULLNULL":
            if len(self.childrensByKey(key)) > 0:
                return True
            else:
                return False
        else:
            return True
    def presetKey(self, key, value):
        if not self.checkKey(key):
            self.writeKey(key, value)
    def readFile(self):
        if os.path.exists(self.file) and os.path.isfile(self.file):
            return self.hdf.readFile(self.file);
    def writeFile(self):
        return self.hdf.writeFile(self.file);
    def __str__( self ):
        return self.hdf.dump()

def help(error):
    print error

if args.action == "write" or args.action == "delete" or args.action == "preset":
    lockf = open(args.file, 'a')
    fcntl.flock(lockf,fcntl.LOCK_EX)

hdf = HDF(args.file)

if args.action == "read":
    print hdf.readKey(args.key)
elif args.action == "write":
    hdf.writeKey(args.key, args.value)
elif args.action == "delete":
    hdf.deleteKey(args.key)
elif args.action == "dump":
    print hdf.dumpKey(args.key)
elif args.action == "preset":
    hdf.presetKey(args.key, args.value)
elif args.action == "childrens":
    for item in hdf.childrensByKey(args.key):
        print item
elif args.action == "check":
    if hdf.checkKey(args.key):
      print 1
    else:
      print 0

if args.action == "write" or args.action == "delete" or args.action == "preset":
    hdf.writeFile()
    lockf.close()
